// Code generated by go-bindata.

package agent

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"github.com/elazarl/go-bindata-assetfs"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var empty = []byte("")
var _web_uiIndexHtml = empty

func web_uiIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_web_uiIndexHtml,
		"web_ui/index.html",
	)
}

func web_uiIndexHtml() (*asset, error) {
	bytes, err := web_uiIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "web_ui/index.html", size: 30177, mode: os.FileMode(420), modTime: time.Unix(1523639014, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _web_uiStaticAndroidChrome192x192Png = empty

func web_uiStaticAndroidChrome192x192PngBytes() ([]byte, error) {
	return bindataRead(
		_web_uiStaticAndroidChrome192x192Png,
		"web_ui/static/android-chrome-192x192.png",
	)
}

func web_uiStaticAndroidChrome192x192Png() (*asset, error) {
	bytes, err := web_uiStaticAndroidChrome192x192PngBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "web_ui/static/android-chrome-192x192.png", size: 18250, mode: os.FileMode(420), modTime: time.Unix(1523639013, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _web_uiStaticAndroidChrome512x512Png = []byte("")

func web_uiStaticAndroidChrome512x512PngBytes() ([]byte, error) {
	return bindataRead(
		_web_uiStaticAndroidChrome512x512Png,
		"web_ui/static/android-chrome-512x512.png",
	)
}

func web_uiStaticAndroidChrome512x512Png() (*asset, error) {
	bytes, err := web_uiStaticAndroidChrome512x512PngBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "web_ui/static/android-chrome-512x512.png", size: 58433, mode: os.FileMode(420), modTime: time.Unix(1523639013, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _web_uiStaticAppleTouchIcon114x114Png = []byte("")

func web_uiStaticAppleTouchIcon114x114PngBytes() ([]byte, error) {
	return bindataRead(
		_web_uiStaticAppleTouchIcon114x114Png,
		"web_ui/static/apple-touch-icon-114x114.png",
	)
}

func web_uiStaticAppleTouchIcon114x114Png() (*asset, error) {
	bytes, err := web_uiStaticAppleTouchIcon114x114PngBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "web_ui/static/apple-touch-icon-114x114.png", size: 15576, mode: os.FileMode(420), modTime: time.Unix(1523639013, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _web_uiStaticAppleTouchIcon120x120Png = []byte("")

func web_uiStaticAppleTouchIcon120x120PngBytes() ([]byte, error) {
	return bindataRead(
		_web_uiStaticAppleTouchIcon120x120Png,
		"web_ui/static/apple-touch-icon-120x120.png",
	)
}

func web_uiStaticAppleTouchIcon120x120Png() (*asset, error) {
	bytes, err := web_uiStaticAppleTouchIcon120x120PngBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "web_ui/static/apple-touch-icon-120x120.png", size: 16251, mode: os.FileMode(420), modTime: time.Unix(1523639013, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _web_uiStaticAppleTouchIcon144x144Png = []byte("")

func web_uiStaticAppleTouchIcon144x144PngBytes() ([]byte, error) {
	return bindataRead(
		_web_uiStaticAppleTouchIcon144x144Png,
		"web_ui/static/apple-touch-icon-144x144.png",
	)
}

func web_uiStaticAppleTouchIcon144x144Png() (*asset, error) {
	bytes, err := web_uiStaticAppleTouchIcon144x144PngBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "web_ui/static/apple-touch-icon-144x144.png", size: 20027, mode: os.FileMode(420), modTime: time.Unix(1523639013, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _web_uiStaticAppleTouchIcon152x152Png = []byte("")

func web_uiStaticAppleTouchIcon152x152PngBytes() ([]byte, error) {
	return bindataRead(
		_web_uiStaticAppleTouchIcon152x152Png,
		"web_ui/static/apple-touch-icon-152x152.png",
	)
}

func web_uiStaticAppleTouchIcon152x152Png() (*asset, error) {
	bytes, err := web_uiStaticAppleTouchIcon152x152PngBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "web_ui/static/apple-touch-icon-152x152.png", size: 23769, mode: os.FileMode(420), modTime: time.Unix(1523639013, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _web_uiStaticAppleTouchIcon57x57Png = empty

func web_uiStaticAppleTouchIcon57x57PngBytes() ([]byte, error) {
	return bindataRead(
		_web_uiStaticAppleTouchIcon57x57Png,
		"web_ui/static/apple-touch-icon-57x57.png",
	)
}

func web_uiStaticAppleTouchIcon57x57Png() (*asset, error) {
	bytes, err := web_uiStaticAppleTouchIcon57x57PngBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "web_ui/static/apple-touch-icon-57x57.png", size: 5158, mode: os.FileMode(420), modTime: time.Unix(1523639013, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _web_uiStaticAppleTouchIcon60x60Png = empty

func web_uiStaticAppleTouchIcon60x60PngBytes() ([]byte, error) {
	return bindataRead(
		_web_uiStaticAppleTouchIcon60x60Png,
		"web_ui/static/apple-touch-icon-60x60.png",
	)
}

func web_uiStaticAppleTouchIcon60x60Png() (*asset, error) {
	bytes, err := web_uiStaticAppleTouchIcon60x60PngBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "web_ui/static/apple-touch-icon-60x60.png", size: 5522, mode: os.FileMode(420), modTime: time.Unix(1523639013, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _web_uiStaticAppleTouchIcon72x72Png = empty

func web_uiStaticAppleTouchIcon72x72PngBytes() ([]byte, error) {
	return bindataRead(
		_web_uiStaticAppleTouchIcon72x72Png,
		"web_ui/static/apple-touch-icon-72x72.png",
	)
}

func web_uiStaticAppleTouchIcon72x72Png() (*asset, error) {
	bytes, err := web_uiStaticAppleTouchIcon72x72PngBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "web_ui/static/apple-touch-icon-72x72.png", size: 7289, mode: os.FileMode(420), modTime: time.Unix(1523639013, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _web_uiStaticAppleTouchIcon76x76Png = empty

func web_uiStaticAppleTouchIcon76x76PngBytes() ([]byte, error) {
	return bindataRead(
		_web_uiStaticAppleTouchIcon76x76Png,
		"web_ui/static/apple-touch-icon-76x76.png",
	)
}

func web_uiStaticAppleTouchIcon76x76Png() (*asset, error) {
	bytes, err := web_uiStaticAppleTouchIcon76x76PngBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "web_ui/static/apple-touch-icon-76x76.png", size: 8031, mode: os.FileMode(420), modTime: time.Unix(1523639013, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _web_uiStaticAppleTouchIconPng = empty

func web_uiStaticAppleTouchIconPngBytes() ([]byte, error) {
	return bindataRead(
		_web_uiStaticAppleTouchIconPng,
		"web_ui/static/apple-touch-icon.png",
	)
}

func web_uiStaticAppleTouchIconPng() (*asset, error) {
	bytes, err := web_uiStaticAppleTouchIconPngBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "web_ui/static/apple-touch-icon.png", size: 8285, mode: os.FileMode(420), modTime: time.Unix(1523639013, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _web_uiStaticApplicationMinJs = empty

func web_uiStaticApplicationMinJsBytes() ([]byte, error) {
	return bindataRead(
		_web_uiStaticApplicationMinJs,
		"web_ui/static/application.min.js",
	)
}

func web_uiStaticApplicationMinJs() (*asset, error) {
	bytes, err := web_uiStaticApplicationMinJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "web_ui/static/application.min.js", size: 770924, mode: os.FileMode(420), modTime: time.Unix(1523639013, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _web_uiStaticBaseCss = empty

func web_uiStaticBaseCssBytes() ([]byte, error) {
	return bindataRead(
		_web_uiStaticBaseCss,
		"web_ui/static/base.css",
	)
}

func web_uiStaticBaseCss() (*asset, error) {
	bytes, err := web_uiStaticBaseCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "web_ui/static/base.css", size: 40476, mode: os.FileMode(420), modTime: time.Unix(1523639013, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _web_uiStaticBaseCssMap = empty

func web_uiStaticBaseCssMapBytes() ([]byte, error) {
	return bindataRead(
		_web_uiStaticBaseCssMap,
		"web_ui/static/base.css.map",
	)
}

func web_uiStaticBaseCssMap() (*asset, error) {
	bytes, err := web_uiStaticBaseCssMapBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "web_ui/static/base.css.map", size: 18984, mode: os.FileMode(420), modTime: time.Unix(1523639014, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _web_uiStaticBootstrapMinCss = empty

func web_uiStaticBootstrapMinCssBytes() ([]byte, error) {
	return bindataRead(
		_web_uiStaticBootstrapMinCss,
		"web_ui/static/bootstrap.min.css",
	)
}

func web_uiStaticBootstrapMinCss() (*asset, error) {
	bytes, err := web_uiStaticBootstrapMinCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "web_ui/static/bootstrap.min.css", size: 90287, mode: os.FileMode(420), modTime: time.Unix(1523639013, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _web_uiStaticConsulLogoPng = empty

func web_uiStaticConsulLogoPngBytes() ([]byte, error) {
	return bindataRead(
		_web_uiStaticConsulLogoPng,
		"web_ui/static/consul-logo.png",
	)
}

func web_uiStaticConsulLogoPng() (*asset, error) {
	bytes, err := web_uiStaticConsulLogoPngBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "web_ui/static/consul-logo.png", size: 58433, mode: os.FileMode(420), modTime: time.Unix(1523639013, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _web_uiStaticFavicon128Png = empty

func web_uiStaticFavicon128PngBytes() ([]byte, error) {
	return bindataRead(
		_web_uiStaticFavicon128Png,
		"web_ui/static/favicon-128.png",
	)
}

func web_uiStaticFavicon128Png() (*asset, error) {
	bytes, err := web_uiStaticFavicon128PngBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "web_ui/static/favicon-128.png", size: 11154, mode: os.FileMode(420), modTime: time.Unix(1523639013, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _web_uiStaticFavicon16x16Png = empty

func web_uiStaticFavicon16x16PngBytes() ([]byte, error) {
	return bindataRead(
		_web_uiStaticFavicon16x16Png,
		"web_ui/static/favicon-16x16.png",
	)
}

func web_uiStaticFavicon16x16Png() (*asset, error) {
	bytes, err := web_uiStaticFavicon16x16PngBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "web_ui/static/favicon-16x16.png", size: 821, mode: os.FileMode(420), modTime: time.Unix(1523639014, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _web_uiStaticFavicon196x196Png = empty

func web_uiStaticFavicon196x196PngBytes() ([]byte, error) {
	return bindataRead(
		_web_uiStaticFavicon196x196Png,
		"web_ui/static/favicon-196x196.png",
	)
}

func web_uiStaticFavicon196x196Png() (*asset, error) {
	bytes, err := web_uiStaticFavicon196x196PngBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "web_ui/static/favicon-196x196.png", size: 37174, mode: os.FileMode(420), modTime: time.Unix(1523639014, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _web_uiStaticFavicon32x32Png = empty

func web_uiStaticFavicon32x32PngBytes() ([]byte, error) {
	return bindataRead(
		_web_uiStaticFavicon32x32Png,
		"web_ui/static/favicon-32x32.png",
	)
}

func web_uiStaticFavicon32x32Png() (*asset, error) {
	bytes, err := web_uiStaticFavicon32x32PngBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "web_ui/static/favicon-32x32.png", size: 2075, mode: os.FileMode(420), modTime: time.Unix(1523639014, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _web_uiStaticFavicon96x96Png = empty

func web_uiStaticFavicon96x96PngBytes() ([]byte, error) {
	return bindataRead(
		_web_uiStaticFavicon96x96Png,
		"web_ui/static/favicon-96x96.png",
	)
}

func web_uiStaticFavicon96x96Png() (*asset, error) {
	bytes, err := web_uiStaticFavicon96x96PngBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "web_ui/static/favicon-96x96.png", size: 10171, mode: os.FileMode(420), modTime: time.Unix(1523639014, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _web_uiStaticFaviconIco = empty

func web_uiStaticFaviconIcoBytes() ([]byte, error) {
	return bindataRead(
		_web_uiStaticFaviconIco,
		"web_ui/static/favicon.ico",
	)
}

func web_uiStaticFaviconIco() (*asset, error) {
	bytes, err := web_uiStaticFaviconIcoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "web_ui/static/favicon.ico", size: 34494, mode: os.FileMode(420), modTime: time.Unix(1523639014, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _web_uiStaticFaviconPng = empty

func web_uiStaticFaviconPngBytes() ([]byte, error) {
	return bindataRead(
		_web_uiStaticFaviconPng,
		"web_ui/static/favicon.png",
	)
}

func web_uiStaticFaviconPng() (*asset, error) {
	bytes, err := web_uiStaticFaviconPngBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "web_ui/static/favicon.png", size: 821, mode: os.FileMode(420), modTime: time.Unix(1523639014, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _web_uiStaticLoadingCylonPinkSvg = empty

func web_uiStaticLoadingCylonPinkSvgBytes() ([]byte, error) {
	return bindataRead(
		_web_uiStaticLoadingCylonPinkSvg,
		"web_ui/static/loading-cylon-pink.svg",
	)
}

func web_uiStaticLoadingCylonPinkSvg() (*asset, error) {
	bytes, err := web_uiStaticLoadingCylonPinkSvgBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "web_ui/static/loading-cylon-pink.svg", size: 983, mode: os.FileMode(420), modTime: time.Unix(1523639014, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _web_uiStaticMstile144x144Png = empty

func web_uiStaticMstile144x144PngBytes() ([]byte, error) {
	return bindataRead(
		_web_uiStaticMstile144x144Png,
		"web_ui/static/mstile-144x144.png",
	)
}

func web_uiStaticMstile144x144Png() (*asset, error) {
	bytes, err := web_uiStaticMstile144x144PngBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "web_ui/static/mstile-144x144.png", size: 20027, mode: os.FileMode(420), modTime: time.Unix(1523639014, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _web_uiStaticMstile150x150Png = empty

func web_uiStaticMstile150x150PngBytes() ([]byte, error) {
	return bindataRead(
		_web_uiStaticMstile150x150Png,
		"web_ui/static/mstile-150x150.png",
	)
}

func web_uiStaticMstile150x150Png() (*asset, error) {
	bytes, err := web_uiStaticMstile150x150PngBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "web_ui/static/mstile-150x150.png", size: 64646, mode: os.FileMode(420), modTime: time.Unix(1523639014, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _web_uiStaticMstile310x150Png = empty

func web_uiStaticMstile310x150PngBytes() ([]byte, error) {
	return bindataRead(
		_web_uiStaticMstile310x150Png,
		"web_ui/static/mstile-310x150.png",
	)
}

func web_uiStaticMstile310x150Png() (*asset, error) {
	bytes, err := web_uiStaticMstile310x150PngBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "web_ui/static/mstile-310x150.png", size: 112362, mode: os.FileMode(420), modTime: time.Unix(1523639014, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _web_uiStaticMstile310x310Png = empty

func web_uiStaticMstile310x310PngBytes() ([]byte, error) {
	return bindataRead(
		_web_uiStaticMstile310x310Png,
		"web_ui/static/mstile-310x310.png",
	)
}

func web_uiStaticMstile310x310Png() (*asset, error) {
	bytes, err := web_uiStaticMstile310x310PngBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "web_ui/static/mstile-310x310.png", size: 201893, mode: os.FileMode(420), modTime: time.Unix(1523639014, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _web_uiStaticMstile70x70Png = empty

func web_uiStaticMstile70x70PngBytes() ([]byte, error) {
	return bindataRead(
		_web_uiStaticMstile70x70Png,
		"web_ui/static/mstile-70x70.png",
	)
}

func web_uiStaticMstile70x70Png() (*asset, error) {
	bytes, err := web_uiStaticMstile70x70PngBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "web_ui/static/mstile-70x70.png", size: 11154, mode: os.FileMode(420), modTime: time.Unix(1523639014, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _web_uiStaticSafariPinnedTabSvg = empty

func web_uiStaticSafariPinnedTabSvgBytes() ([]byte, error) {
	return bindataRead(
		_web_uiStaticSafariPinnedTabSvg,
		"web_ui/static/safari-pinned-tab.svg",
	)
}

func web_uiStaticSafariPinnedTabSvg() (*asset, error) {
	bytes, err := web_uiStaticSafariPinnedTabSvgBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "web_ui/static/safari-pinned-tab.svg", size: 3798, mode: os.FileMode(420), modTime: time.Unix(1523639014, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

var _bindata = map[string]func() (*asset, error){
	"web_ui/index.html":                          web_uiIndexHtml,
	"web_ui/static/android-chrome-192x192.png":   web_uiStaticAndroidChrome192x192Png,
	"web_ui/static/android-chrome-512x512.png":   web_uiStaticAndroidChrome512x512Png,
	"web_ui/static/apple-touch-icon-114x114.png": web_uiStaticAppleTouchIcon114x114Png,
	"web_ui/static/apple-touch-icon-120x120.png": web_uiStaticAppleTouchIcon120x120Png,
	"web_ui/static/apple-touch-icon-144x144.png": web_uiStaticAppleTouchIcon144x144Png,
	"web_ui/static/apple-touch-icon-152x152.png": web_uiStaticAppleTouchIcon152x152Png,
	"web_ui/static/apple-touch-icon-57x57.png":   web_uiStaticAppleTouchIcon57x57Png,
	"web_ui/static/apple-touch-icon-60x60.png":   web_uiStaticAppleTouchIcon60x60Png,
	"web_ui/static/apple-touch-icon-72x72.png":   web_uiStaticAppleTouchIcon72x72Png,
	"web_ui/static/apple-touch-icon-76x76.png":   web_uiStaticAppleTouchIcon76x76Png,
	"web_ui/static/apple-touch-icon.png":         web_uiStaticAppleTouchIconPng,
	"web_ui/static/application.min.js":           web_uiStaticApplicationMinJs,
	"web_ui/static/base.css":                     web_uiStaticBaseCss,
	"web_ui/static/base.css.map":                 web_uiStaticBaseCssMap,
	"web_ui/static/bootstrap.min.css":            web_uiStaticBootstrapMinCss,
	"web_ui/static/consul-logo.png":              web_uiStaticConsulLogoPng,
	"web_ui/static/favicon-128.png":              web_uiStaticFavicon128Png,
	"web_ui/static/favicon-16x16.png":            web_uiStaticFavicon16x16Png,
	"web_ui/static/favicon-196x196.png":          web_uiStaticFavicon196x196Png,
	"web_ui/static/favicon-32x32.png":            web_uiStaticFavicon32x32Png,
	"web_ui/static/favicon-96x96.png":            web_uiStaticFavicon96x96Png,
	"web_ui/static/favicon.ico":                  web_uiStaticFaviconIco,
	"web_ui/static/favicon.png":                  web_uiStaticFaviconPng,
	"web_ui/static/loading-cylon-pink.svg":       web_uiStaticLoadingCylonPinkSvg,
	"web_ui/static/mstile-144x144.png":           web_uiStaticMstile144x144Png,
	"web_ui/static/mstile-150x150.png":           web_uiStaticMstile150x150Png,
	"web_ui/static/mstile-310x150.png":           web_uiStaticMstile310x150Png,
	"web_ui/static/mstile-310x310.png":           web_uiStaticMstile310x310Png,
	"web_ui/static/mstile-70x70.png":             web_uiStaticMstile70x70Png,
	"web_ui/static/safari-pinned-tab.svg":        web_uiStaticSafariPinnedTabSvg,
}

func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"web_ui": {nil, map[string]*bintree{
		"index.html": {web_uiIndexHtml, map[string]*bintree{}},
		"static": {nil, map[string]*bintree{
			"android-chrome-192x192.png":   {web_uiStaticAndroidChrome192x192Png, map[string]*bintree{}},
			"android-chrome-512x512.png":   {web_uiStaticAndroidChrome512x512Png, map[string]*bintree{}},
			"apple-touch-icon-114x114.png": {web_uiStaticAppleTouchIcon114x114Png, map[string]*bintree{}},
			"apple-touch-icon-120x120.png": {web_uiStaticAppleTouchIcon120x120Png, map[string]*bintree{}},
			"apple-touch-icon-144x144.png": {web_uiStaticAppleTouchIcon144x144Png, map[string]*bintree{}},
			"apple-touch-icon-152x152.png": {web_uiStaticAppleTouchIcon152x152Png, map[string]*bintree{}},
			"apple-touch-icon-57x57.png":   {web_uiStaticAppleTouchIcon57x57Png, map[string]*bintree{}},
			"apple-touch-icon-60x60.png":   {web_uiStaticAppleTouchIcon60x60Png, map[string]*bintree{}},
			"apple-touch-icon-72x72.png":   {web_uiStaticAppleTouchIcon72x72Png, map[string]*bintree{}},
			"apple-touch-icon-76x76.png":   {web_uiStaticAppleTouchIcon76x76Png, map[string]*bintree{}},
			"apple-touch-icon.png":         {web_uiStaticAppleTouchIconPng, map[string]*bintree{}},
			"application.min.js":           {web_uiStaticApplicationMinJs, map[string]*bintree{}},
			"base.css":                     {web_uiStaticBaseCss, map[string]*bintree{}},
			"base.css.map":                 {web_uiStaticBaseCssMap, map[string]*bintree{}},
			"bootstrap.min.css":            {web_uiStaticBootstrapMinCss, map[string]*bintree{}},
			"consul-logo.png":              {web_uiStaticConsulLogoPng, map[string]*bintree{}},
			"favicon-128.png":              {web_uiStaticFavicon128Png, map[string]*bintree{}},
			"favicon-16x16.png":            {web_uiStaticFavicon16x16Png, map[string]*bintree{}},
			"favicon-196x196.png":          {web_uiStaticFavicon196x196Png, map[string]*bintree{}},
			"favicon-32x32.png":            {web_uiStaticFavicon32x32Png, map[string]*bintree{}},
			"favicon-96x96.png":            {web_uiStaticFavicon96x96Png, map[string]*bintree{}},
			"favicon.ico":                  {web_uiStaticFaviconIco, map[string]*bintree{}},
			"favicon.png":                  {web_uiStaticFaviconPng, map[string]*bintree{}},
			"loading-cylon-pink.svg":       {web_uiStaticLoadingCylonPinkSvg, map[string]*bintree{}},
			"mstile-144x144.png":           {web_uiStaticMstile144x144Png, map[string]*bintree{}},
			"mstile-150x150.png":           {web_uiStaticMstile150x150Png, map[string]*bintree{}},
			"mstile-310x150.png":           {web_uiStaticMstile310x150Png, map[string]*bintree{}},
			"mstile-310x310.png":           {web_uiStaticMstile310x310Png, map[string]*bintree{}},
			"mstile-70x70.png":             {web_uiStaticMstile70x70Png, map[string]*bintree{}},
			"safari-pinned-tab.svg":        {web_uiStaticSafariPinnedTabSvg, map[string]*bintree{}},
		}},
	}},
}}

func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)

	if err != nil {
		return RestoreAsset(dir, name)
	}

	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
